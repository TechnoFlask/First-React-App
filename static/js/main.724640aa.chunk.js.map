{"version":3,"sources":["Components/About.jsx","Components/Navbar.jsx","Components/Textarea.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["About","propsAbout","_useState","useState","color","backgroundColor","toggle","display","_useState2","Object","slicedToArray","style","setStyle","_useState3","_useState4","btnTxt","setBtnTxt","body","document","toggleStyle","react_default","a","createElement","Fragment","className","concat","mode","onClick","toggleMode","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","proptypes","PropTypes","func","isRequired","string","justifyContent","Navbar","propsNav","console","log","name","base","dist","to","toggleColor","htmlFor","Textarea","propsTextarea","dark","light","default","text","setText","heading","rows","onChange","event","target","value","toUpperCase","toLowerCase","navigator","clipboard","writeText","replace","length","trim","split","defaultProps","App","setMode","setColor","react_router_dist","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.724640aa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function About(propsAbout) {\r\n    const [style, setStyle] = useState({\r\n        color: \"black\",\r\n        backgroundColor: propsAbout.color,\r\n        toggle: {\r\n            display: \"none\"\r\n        }\r\n    });\r\n    const [btnTxt, setBtnTxt] = useState(\"Switch to Dark mode\");\r\n\r\n    const body = document.body;\r\n    body.style.backgroundColor = style.backgroundColor;\r\n    body.style.color = style.color;\r\n\r\n    let toggleStyle = function () {\r\n\r\n        if (btnTxt === \"Switch to Dark mode\") {\r\n            setStyle({\r\n                color: \"white\",\r\n                backgroundColor: propsAbout.color,\r\n                toggle: {\r\n                    display: \"inline-block\"\r\n                }\r\n            });\r\n            setBtnTxt(\"Switch to Light mode\");\r\n        } else {\r\n            setStyle({\r\n                color: \"black\",\r\n                backgroundColor: \"white\",\r\n                toggle: {\r\n                    display: \"none\"\r\n                }\r\n            });\r\n            setBtnTxt(\"Switch to Dark mode\");\r\n        }\r\n\r\n    }\r\n    function join() {\r\n        toggleStyle();\r\n        propsAbout.toggleMode();\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container mb-5\" style={style}>\r\n                <button className={`btn btn-${propsAbout.mode === 'light' ? 'info' : 'light'} my-2`} onClick={join} id=\"change\">{btnTxt}\r\n                </button>\r\n                <button className=\"btn btn-light my-2 mx-3\" onClick={() => {\r\n                    setStyle({\r\n                        color: \"white\",\r\n                        backgroundColor: propsAbout.color,\r\n                    })\r\n                }} id=\"change\" style={style.toggle} >Toggle dark mode\r\n                </button>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\" style={style}>\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={style}>\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={style}>\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={style}>\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={style}>\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={style}>\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nAbout.proptypes = {\r\n    toggleMode: PropTypes.func.isRequired,\r\n    mode: PropTypes.string.isRequired\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nconst style = {\r\n    justifyContent: \"initial\"\r\n}\r\n\r\nexport default function Navbar(propsNav) {\r\n    console.log(propsNav.mode)\r\n    return (\r\n        <>\r\n            <nav className={`navbar bg-${propsNav.mode === 'light' ? 'info' : 'dark'} navbar-dark`} id='navbar'>\r\n                <div className=\"container-fluid\" style={style}>\r\n                    <span className=\"navbar-brand mb-0 h1\">{propsNav.name}</span>\r\n                    <span className=\"navbar-brand mb-0 h1\">{propsNav.base}</span>\r\n                    <Link className=\"navbar-brand mb-0 h1\" to=\"/about\">About</Link>\r\n                    <Link className=\"navbar-brand mb-0 h1\" to=\"/textarea\">TextArea</Link>\r\n                    <div id=\"colors\">\r\n                        <p>Dark modes</p>\r\n                        <div className=\"form-check\">\r\n                            <input className=\"form-check-input green radio\" type=\"radio\" id=\"purpleSwitch\" onClick={() => { propsNav.toggleColor('rgb(58,59,60)') }} name='radio' />\r\n                            <label className=\"form-check-label\" htmlFor=\"purpleSwitch\" >Black</label>\r\n                        </div>\r\n                        <div className=\"form-check mx-4\">\r\n                            <input className=\"form-check-input radio\" type=\"radio\" id=\"blueSwitch\" onClick={() => { propsNav.toggleColor('rgb(3,48,93)') }} name='radio' />\r\n                            <label className=\"form-check-label \" htmlFor=\"blueSwitch\">blue</label>\r\n                        </div>\r\n                        <div className=\"form-check mx-1\">\r\n                            <input className=\"form-check-input radio\" type=\"radio\" id=\"blueSwitch\" onClick={() => { propsNav.toggleColor('rgb(12,68,41)') }} name='radio' />\r\n                            <label className=\"form-check-label \" htmlFor=\"blueSwitch\">Green</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\n// PropTypes is setting data-types for props.\r\n\r\n// isRequired means it is must and cannot be blank.\r\nNavbar.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    base: PropTypes.string,\r\n    mode: PropTypes.string.isRequired\r\n};\r\n\r\n// Default values of props in-case no props are passed.\r\nNavbar.defaultProps = {\r\n    name: 'This is the default value of name.',\r\n    base: 'This is the default value of base.',\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Textarea(propsTextarea) {\r\n    let style = {\r\n        dark: {\r\n            backgroundColor: '#292929',\r\n            color: 'white'\r\n        },\r\n        light: {\r\n            backgroundColor: 'white',\r\n            color: 'black'\r\n        }\r\n    }\r\n    /**\r\n     * text -> variable whose state has to be changed.\r\n     * setText -> Function change the state of text.\r\n     * useState argument -> text default value.\r\n     * setText argument -> text new value.\r\n     */\r\n    const [text, setText] = useState(propsTextarea.default);\r\n    function change(event) {\r\n        setText(event.target.value);\r\n    };\r\n    function textChangeUp() {\r\n        setText(text.toUpperCase());\r\n    };\r\n    function textChangeLow() {\r\n        setText(text.toLowerCase());\r\n    };\r\n    function textClear() {\r\n        setText('');\r\n    };\r\n    function textCopy() {\r\n        navigator.clipboard.writeText(text);\r\n    }\r\n    function clearSpace() {\r\n        setText(text.replace(/\\s+/g, ' '));\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\">\r\n                <h1>{propsTextarea.heading}</h1>\r\n                <div className='my-3'>\r\n                    <textarea className=\"form-control\" id=\"textarea\" rows={propsTextarea.rows} onChange={change} value={text} style={propsTextarea.mode === 'light' ? style.light : style.dark}></textarea>\r\n                    <button className={`btn btn-${propsTextarea.mode === 'light' ? 'info' : 'light'} my-3`} onClick={textChangeUp}>To Upper Case</button>\r\n                    <button className={`btn btn-${propsTextarea.mode === 'light' ? 'info' : 'light'} my-3 mx-3`} onClick={textChangeLow}>To Lower Case</button>\r\n                    <button className={`btn btn-${propsTextarea.mode === 'light' ? 'info' : 'light'} my-3 mx-1`} onClick={textClear}>Clear</button>\r\n                    <button className={`btn btn-${propsTextarea.mode === 'light' ? 'info' : 'light'} my-3 mx-3`} onClick={textCopy}>Copy text</button>\r\n                    <button className={`btn btn-${propsTextarea.mode === 'light' ? 'info' : 'light'} my-3 mx-1`} onClick={clearSpace}>Clear spaces</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\">\r\n                <h1>Your text summary</h1>\r\n                <p>{text.length > 0 ? text.replace(/\\s+/g, ' ').trim().split(' ').length : 0} words and {text.length} characters.</p>\r\n                <h2>Text preview:</h2>\r\n                <p>{text.length > 0 ? text : 'Please enter some text to preview.'}</p>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nTextarea.propTypes = {\r\n    heading: PropTypes.string.isRequired,\r\n    rows: PropTypes.number,\r\n    default: PropTypes.string.isRequired,\r\n    mode: PropTypes.string.isRequired\r\n};\r\n","import \"./App.css\";\nimport { BrowserRouter as Router, Routes, Route, } from \"react-router-dom\";\nimport About from \"./Components/About.jsx\";\nimport Navbar from \"./Components/Navbar.jsx\";\nimport Textarea from \"./Components/Textarea.jsx\";\nimport React, { useState } from 'react';\n\nfunction App() {\n\n  // function to toggle light-dark mode:\n  const [mode, setMode] = useState('light');\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n    }\n    else {\n      setMode('light');\n    }\n  };\n\n  const [color, setColor] = useState('white');\n  const toggleColor = (color) => {\n    setColor(color);\n  }\n  return (\n    <>\n      {/* This is a react component. Tag name is same as the file_name. */}\n      {/* Tag attributes are passed to the component function as an object as a parameter. */}\n      {/* <Navbar name={346}/> */}{/* Invalid as number is passed instead of string.(PropType is defined as string) */}\n      {/* Router is used to create single page web applications. */}\n      {/* Elements outside of Routes are common in all pages. */}\n      {/* Route is the child element of Routes. Normal elements are not available as child of Routes. We have to pass components through element attribute. */}\n      <Router>\n        <Navbar name='React' base='JavaScript' mode={mode} toggleColor={toggleColor} />\n        <h1 className=\"container my-2\">This is my first react app</h1>\n        <Routes>\n          <Route path=\"/textarea\" element={<Textarea heading='Enter your text' rows={8} default='Enter your text here' mode={mode} />} />\n          <Route path=\"/about\" element={<About toggleMode={toggleMode} mode={mode} color={color} />} />\n        </Routes>\n      </Router>\n\n\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS,\n      getFID,\n      getFCP,\n      getLCP,\n      getTTFB\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}